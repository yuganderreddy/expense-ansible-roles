- name: disable nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs
  ansible.builtin.package:
    name: "{{item}}"
    state: present
  loop:
  - nodejs
  - mysql

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: creating app directory
  ansible.builtin.file:
    path: /app
    state: directory  #here we should give 'state: directory' otherwise it creates 'file' by default.

- name: downloading backend code
  ansible.builtin.get_url:
    url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip

- name: extracting backend code
  ansible.builtin.unarchive:
    src: /tmp/backend.zip  #by default ansible thinks this file is in ansible server
    dest: /app
    remote_src: yes

- name: download the dependencies
  ansible.builtin.command: npm install
  args:
    chdir: /app

- name: copy backend service  #here copy only works for files without variables
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: ansible to install PyMySQL.
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9

- name: import mysql data
  community.mysql.mysql_db:
    login_user: root
    login_password: "{{mysql_root_password}}"
    login_host: "{{login_host}}"
    state: import
    name: all  # if we 'import' or 'dump' in state, then must give 'all' in name.
    target: /app/schema/backend.sql

- name: daemon reload
  ansible.builtin.systemd_service:
    state: restarted
    daemon_reload: true
    name: backend